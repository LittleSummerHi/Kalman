%kalman filter目标跟踪
%产生目标航迹匀加速直线运动
%设定初值
clc;clear;
N=200;%连续计算N各时刻
n=3; %状态维度
I=eye(9);
T=0.01;% 估计采样间隔 T

%设置初始值
s=[3000,30,2,4000,40,3,5000,50,4]';     %真实状态
x=[4000,20,2,5000,40,3,6000,55,4]'; %估计初始状态
P=100*I;%初始方差P0

%设置噪声方差
sigma_u=1;           % 策动噪声标准差
sigma_r=10 ;sigma_alpha=0.5 ;sigma_beta=0.4;       % 观测噪声方差
vsigma=randn(N,3); %零均值，标准差为1的观测噪声

Q=eye(3)*sigma_u^2;     %%%状态噪声
R=blkdiag(sigma_r^2,sigma_alpha^2,sigma_beta^2);  %%%观测噪声矩阵

Gu=[T^2/2;T;1];
G=blkdiag(Gu,Gu,Gu); %策动矩阵G
Fu=[1,T,T^2/2;0,1,T;0,0,1];
F=blkdiag(Fu,Fu,Fu);  %状态转移矩阵F
Hu=[1 0 0];
H=blkdiag(Hu,Hu,Hu);%观测过程矩阵H


f=@(x)(F*x);  %状态方程
%观测方程
%直角坐标转换为极坐标    
h=@(x)[sqrt(x(1)^2+x(4)^2+x(7)^2);asin(x(7)/sqrt(x(1)^2+x(4)^2+x(7)^2))*180/pi;atan(x(4)/x(1))*180/pi]; 
%极坐标转化为直角坐标
Trans=@(z)[z(1)*cos(z(2)/180*pi)*cos(z(3)/180*pi);z(1)*cos(z(2)/180*pi)*sin(z(3)/180*pi);z(1)*sin(z(2)/180*pi)];

%保存结果
xV = zeros(9,N);  %滤波结果        
sV = zeros(n,N);  %实际结果
zV = zeros(n,N);%测量值
pV =zeros(9,N);%预测值
XV = zeros(n,N);%转化为极坐标的滤波结果
SV = zeros(n,N);  %极坐标下的实际结果
ZV = zeros(n,N);%转化为直角坐标的测量值
PV =zeros(n,N);%极坐标预测值
dzV=zeros(n,N);
dxV=zeros(n,N);
dpreV=zeros(n,N);

%滤波过程
for k=1:N
    x_=x;
  S=h(s);
  z = h(s) + R*vsigma(k,:)';   %极坐标下状态测量值    
  dz=z-S;
  dzV(:,k)=dz;
  pre=F*x+G*Q*vsigma(k,:)';%状态预测结果
  Pre=h(pre);%极坐标下的预测值
  PV(:,k)=Pre;
  dpre=Pre-S;
  dpreV(:,k)=dpre;
  sV(:,k)=h(s);  %极坐标下真实值
  zV(:,k) =z; %状态测量值
  Z=Trans(z);
  ZV(:,k)=Z;%转化为直角坐标系的测量值12
  P_=F*P*F'+G*Q*G';         %预测过程方差
  K=P_*H'*inv(H*P_*H'+R); %卡尔曼增益
  x=x_+K*(Z-H*x_);        %状态估计值
  x=[x(1),(x(1)-x_(1))/T,2*(x(1)-x_(1))/T^2,x(4),(x(4)-x_(4))/T,2*(x(4)-x_(4))/T^2,x(7),(x(7)-x_(7))/T,2*(x(7)-x_(7))/T^2]';
  P=(I-K*H)*P_*(I-K*H)'+K*R*K'; %滤波方差
  xV(:,k) = x;          %save
  X=h(x);
  XV(:,k)=X;
  dx=X-S;
  s = f(s);  %update process 
  dxV(:,k)=dx;
end

for i=1:3
figure(i)
plot(dzV(i,:),'-b.');hold on;
plot(dpreV(i,:),'-g.');hold on;
plot(dxV(i,:),'-r.');hold on;
%plot(sV(i,:),'-k.');hold on;
legend('观测','预测','滤波');
end
